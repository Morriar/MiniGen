/* This file was generated by SableCC (http://www.sablecc.org/). */

package minigen.syntax3.parser;

import minigen.syntax3.lexer.*;
import minigen.syntax3.node.*;
import minigen.syntax3.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAprogram1Program */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAprogram2Program */
		    {
			ArrayList list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce AAprogram3Program */
		    {
			ArrayList list = new2();
			push(goTo(0), list, false);
		    }
		    break;
                    case 3: /* reduce AAprogram4Program */
		    {
			ArrayList list = new3();
			push(goTo(0), list, false);
		    }
		    break;
                    case 4: /* reduce AAclassdecl1ClassDecl */
		    {
			ArrayList list = new4();
			push(goTo(1), list, false);
		    }
		    break;
                    case 5: /* reduce AAclassdecl2ClassDecl */
		    {
			ArrayList list = new5();
			push(goTo(1), list, false);
		    }
		    break;
                    case 6: /* reduce AAclassdecl3ClassDecl */
		    {
			ArrayList list = new6();
			push(goTo(1), list, false);
		    }
		    break;
                    case 7: /* reduce AAclassdecl4ClassDecl */
		    {
			ArrayList list = new7();
			push(goTo(1), list, false);
		    }
		    break;
                    case 8: /* reduce AAclassdecl5ClassDecl */
		    {
			ArrayList list = new8();
			push(goTo(1), list, false);
		    }
		    break;
                    case 9: /* reduce AAclassdecl6ClassDecl */
		    {
			ArrayList list = new9();
			push(goTo(1), list, false);
		    }
		    break;
                    case 10: /* reduce AAclassdecl7ClassDecl */
		    {
			ArrayList list = new10();
			push(goTo(1), list, false);
		    }
		    break;
                    case 11: /* reduce AAclassdecl8ClassDecl */
		    {
			ArrayList list = new11();
			push(goTo(1), list, false);
		    }
		    break;
                    case 12: /* reduce AFormalDecls */
		    {
			ArrayList list = new12();
			push(goTo(2), list, false);
		    }
		    break;
                    case 13: /* reduce AAformaldecl1FormalDecl */
		    {
			ArrayList list = new13();
			push(goTo(3), list, false);
		    }
		    break;
                    case 14: /* reduce AAformaldecl2FormalDecl */
		    {
			ArrayList list = new14();
			push(goTo(3), list, false);
		    }
		    break;
                    case 15: /* reduce AAdditionalFormalTypes */
		    {
			ArrayList list = new15();
			push(goTo(4), list, false);
		    }
		    break;
                    case 16: /* reduce AAtype1Type */
		    {
			ArrayList list = new16();
			push(goTo(5), list, false);
		    }
		    break;
                    case 17: /* reduce AAtype2Type */
		    {
			ArrayList list = new17();
			push(goTo(5), list, false);
		    }
		    break;
                    case 18: /* reduce AGenericPart */
		    {
			ArrayList list = new18();
			push(goTo(6), list, false);
		    }
		    break;
                    case 19: /* reduce AAgenerictypes1GenericTypes */
		    {
			ArrayList list = new19();
			push(goTo(7), list, false);
		    }
		    break;
                    case 20: /* reduce AAgenerictypes2GenericTypes */
		    {
			ArrayList list = new20();
			push(goTo(7), list, false);
		    }
		    break;
                    case 21: /* reduce AAdditionalTypes */
		    {
			ArrayList list = new21();
			push(goTo(8), list, false);
		    }
		    break;
                    case 22: /* reduce AAsuperdecls1SuperDecls */
		    {
			ArrayList list = new22();
			push(goTo(9), list, false);
		    }
		    break;
                    case 23: /* reduce AAsuperdecls2SuperDecls */
		    {
			ArrayList list = new23();
			push(goTo(9), list, false);
		    }
		    break;
                    case 24: /* reduce AAdditionalSupers */
		    {
			ArrayList list = new24();
			push(goTo(10), list, false);
		    }
		    break;
                    case 25: /* reduce AAsupertype1SuperType */
		    {
			ArrayList list = new25();
			push(goTo(11), list, false);
		    }
		    break;
                    case 26: /* reduce AAsupertype2SuperType */
		    {
			ArrayList list = new26();
			push(goTo(11), list, false);
		    }
		    break;
                    case 27: /* reduce ASuperGenericPart */
		    {
			ArrayList list = new27();
			push(goTo(12), list, false);
		    }
		    break;
                    case 28: /* reduce AAsupergenerictypes1SuperGenericTypes */
		    {
			ArrayList list = new28();
			push(goTo(13), list, false);
		    }
		    break;
                    case 29: /* reduce AAsupergenerictypes2SuperGenericTypes */
		    {
			ArrayList list = new29();
			push(goTo(13), list, false);
		    }
		    break;
                    case 30: /* reduce ASuperAdditionalTypes */
		    {
			ArrayList list = new30();
			push(goTo(14), list, false);
		    }
		    break;
                    case 31: /* reduce AIsaInstr */
		    {
			ArrayList list = new31();
			push(goTo(15), list, false);
		    }
		    break;
                    case 32: /* reduce ADeclInstr */
		    {
			ArrayList list = new32();
			push(goTo(15), list, false);
		    }
		    break;
                    case 33: /* reduce AAssignInstr */
		    {
			ArrayList list = new33();
			push(goTo(15), list, false);
		    }
		    break;
                    case 34: /* reduce ANewInstr */
		    {
			ArrayList list = new34();
			push(goTo(15), list, false);
		    }
		    break;
                    case 35: /* reduce ATypeInstr */
		    {
			ArrayList list = new35();
			push(goTo(15), list, false);
		    }
		    break;
                    case 36: /* reduce AClassnameInstr */
		    {
			ArrayList list = new36();
			push(goTo(15), list, false);
		    }
		    break;
                    case 37: /* reduce AExecInstr */
		    {
			ArrayList list = new37();
			push(goTo(15), list, false);
		    }
		    break;
                    case 38: /* reduce ANewExp */
		    {
			ArrayList list = new38();
			push(goTo(16), list, false);
		    }
		    break;
                    case 39: /* reduce AVarExp */
		    {
			ArrayList list = new39();
			push(goTo(16), list, false);
		    }
		    break;
                    case 40: /* reduce ATerminal$ClassDecl */
		    {
			ArrayList list = new40();
			push(goTo(17), list, true);
		    }
		    break;
                    case 41: /* reduce ANonTerminal$ClassDecl */
		    {
			ArrayList list = new41();
			push(goTo(17), list, true);
		    }
		    break;
                    case 42: /* reduce ATerminal$Instr */
		    {
			ArrayList list = new42();
			push(goTo(18), list, true);
		    }
		    break;
                    case 43: /* reduce ANonTerminal$Instr */
		    {
			ArrayList list = new43();
			push(goTo(18), list, true);
		    }
		    break;
                    case 44: /* reduce ATerminal$FormalDecl */
		    {
			ArrayList list = new44();
			push(goTo(19), list, true);
		    }
		    break;
                    case 45: /* reduce ANonTerminal$FormalDecl */
		    {
			ArrayList list = new45();
			push(goTo(19), list, true);
		    }
		    break;
                    case 46: /* reduce ATerminal$AdditionalFormalTypes */
		    {
			ArrayList list = new46();
			push(goTo(20), list, true);
		    }
		    break;
                    case 47: /* reduce ANonTerminal$AdditionalFormalTypes */
		    {
			ArrayList list = new47();
			push(goTo(20), list, true);
		    }
		    break;
                    case 48: /* reduce ATerminal$AdditionalTypes */
		    {
			ArrayList list = new48();
			push(goTo(21), list, true);
		    }
		    break;
                    case 49: /* reduce ANonTerminal$AdditionalTypes */
		    {
			ArrayList list = new49();
			push(goTo(21), list, true);
		    }
		    break;
                    case 50: /* reduce ATerminal$AdditionalSupers */
		    {
			ArrayList list = new50();
			push(goTo(22), list, true);
		    }
		    break;
                    case 51: /* reduce ANonTerminal$AdditionalSupers */
		    {
			ArrayList list = new51();
			push(goTo(22), list, true);
		    }
		    break;
                    case 52: /* reduce ATerminal$SuperAdditionalTypes */
		    {
			ArrayList list = new52();
			push(goTo(23), list, true);
		    }
		    break;
                    case 53: /* reduce ANonTerminal$SuperAdditionalTypes */
		    {
			ArrayList list = new53();
			push(goTo(23), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PProgram pprogramNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        }
        {
            // Block
        }

        pprogramNode1 = new AProgram(listNode2, listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pprogramNode1 = new AProgram(listNode3, listNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAprogram3Program */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        }
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprogramNode1 = new AProgram(listNode2, listNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAprogram4Program */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pprogramNode1 = new AProgram(listNode3, listNode5);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAclassdecl1ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TKclass tkclassNode2;
        TName tnameNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        @SuppressWarnings("unused") Object nullNode5 = null;
        LinkedList listNode6 = new LinkedList();
        TKend tkendNode7;
        tkclassNode2 = (TKclass)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        {
            // Block
        }
        tkendNode7 = (TKend)nodeArrayList3.get(0);

        pclassdeclNode1 = new AClassDecl(tkclassNode2, tnameNode3, null, null, listNode6, tkendNode7);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAclassdecl2ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TKclass tkclassNode2;
        TName tnameNode3;
        PFormalDecls pformaldeclsNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        LinkedList listNode6 = new LinkedList();
        TKend tkendNode7;
        tkclassNode2 = (TKclass)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        pformaldeclsNode4 = (PFormalDecls)nodeArrayList3.get(0);
        {
            // Block
        }
        tkendNode7 = (TKend)nodeArrayList4.get(0);

        pclassdeclNode1 = new AClassDecl(tkclassNode2, tnameNode3, pformaldeclsNode4, null, listNode6, tkendNode7);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAclassdecl3ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TKclass tkclassNode2;
        TName tnameNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        PSuperDecls psuperdeclsNode5;
        LinkedList listNode6 = new LinkedList();
        TKend tkendNode7;
        tkclassNode2 = (TKclass)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        psuperdeclsNode5 = (PSuperDecls)nodeArrayList3.get(0);
        {
            // Block
        }
        tkendNode7 = (TKend)nodeArrayList4.get(0);

        pclassdeclNode1 = new AClassDecl(tkclassNode2, tnameNode3, null, psuperdeclsNode5, listNode6, tkendNode7);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAclassdecl4ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TKclass tkclassNode2;
        TName tnameNode3;
        PFormalDecls pformaldeclsNode4;
        PSuperDecls psuperdeclsNode5;
        LinkedList listNode6 = new LinkedList();
        TKend tkendNode7;
        tkclassNode2 = (TKclass)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        pformaldeclsNode4 = (PFormalDecls)nodeArrayList3.get(0);
        psuperdeclsNode5 = (PSuperDecls)nodeArrayList4.get(0);
        {
            // Block
        }
        tkendNode7 = (TKend)nodeArrayList5.get(0);

        pclassdeclNode1 = new AClassDecl(tkclassNode2, tnameNode3, pformaldeclsNode4, psuperdeclsNode5, listNode6, tkendNode7);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AAclassdecl5ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TKclass tkclassNode2;
        TName tnameNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        @SuppressWarnings("unused") Object nullNode5 = null;
        LinkedList listNode7 = new LinkedList();
        TKend tkendNode8;
        tkclassNode2 = (TKclass)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList3.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tkendNode8 = (TKend)nodeArrayList4.get(0);

        pclassdeclNode1 = new AClassDecl(tkclassNode2, tnameNode3, null, null, listNode7, tkendNode8);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAclassdecl6ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TKclass tkclassNode2;
        TName tnameNode3;
        PFormalDecls pformaldeclsNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        LinkedList listNode7 = new LinkedList();
        TKend tkendNode8;
        tkclassNode2 = (TKclass)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        pformaldeclsNode4 = (PFormalDecls)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tkendNode8 = (TKend)nodeArrayList5.get(0);

        pclassdeclNode1 = new AClassDecl(tkclassNode2, tnameNode3, pformaldeclsNode4, null, listNode7, tkendNode8);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAclassdecl7ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TKclass tkclassNode2;
        TName tnameNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        PSuperDecls psuperdeclsNode5;
        LinkedList listNode7 = new LinkedList();
        TKend tkendNode8;
        tkclassNode2 = (TKclass)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        psuperdeclsNode5 = (PSuperDecls)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tkendNode8 = (TKend)nodeArrayList5.get(0);

        pclassdeclNode1 = new AClassDecl(tkclassNode2, tnameNode3, null, psuperdeclsNode5, listNode7, tkendNode8);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAclassdecl8ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TKclass tkclassNode2;
        TName tnameNode3;
        PFormalDecls pformaldeclsNode4;
        PSuperDecls psuperdeclsNode5;
        LinkedList listNode7 = new LinkedList();
        TKend tkendNode8;
        tkclassNode2 = (TKclass)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        pformaldeclsNode4 = (PFormalDecls)nodeArrayList3.get(0);
        psuperdeclsNode5 = (PSuperDecls)nodeArrayList4.get(0);
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tkendNode8 = (TKend)nodeArrayList6.get(0);

        pclassdeclNode1 = new AClassDecl(tkclassNode2, tnameNode3, pformaldeclsNode4, psuperdeclsNode5, listNode7, tkendNode8);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AFormalDecls */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFormalDecls pformaldeclsNode1;
        {
            // Block
        TLb tlbNode2;
        LinkedList listNode4 = new LinkedList();
        TRb trbNode5;
        tlbNode2 = (TLb)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trbNode5 = (TRb)nodeArrayList3.get(0);

        pformaldeclsNode1 = new AFormalDecls(tlbNode2, listNode4, trbNode5);
        }
	nodeList.add(pformaldeclsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAformaldecl1FormalDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFormalDecl pformaldeclNode1;
        {
            // Block
        TName tnameNode2;
        LinkedList listNode3 = new LinkedList();
        tnameNode2 = (TName)nodeArrayList1.get(0);
        {
            // Block
        }

        pformaldeclNode1 = new AFormalDecl(tnameNode2, listNode3);
        }
	nodeList.add(pformaldeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AAformaldecl2FormalDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFormalDecl pformaldeclNode1;
        {
            // Block
        TName tnameNode2;
        LinkedList listNode4 = new LinkedList();
        tnameNode2 = (TName)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pformaldeclNode1 = new AFormalDecl(tnameNode2, listNode4);
        }
	nodeList.add(pformaldeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAdditionalFormalTypes */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAdditionalFormalTypes padditionalformaltypesNode1;
        {
            // Block
        TComma tcommaNode2;
        TName tnameNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);

        padditionalformaltypesNode1 = new AAdditionalFormalTypes(tcommaNode2, tnameNode3);
        }
	nodeList.add(padditionalformaltypesNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAtype1Type */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TName tnameNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        tnameNode2 = (TName)nodeArrayList1.get(0);

        ptypeNode1 = new AType(tnameNode2, null);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAtype2Type */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TName tnameNode2;
        PGenericPart pgenericpartNode3;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        pgenericpartNode3 = (PGenericPart)nodeArrayList2.get(0);

        ptypeNode1 = new AType(tnameNode2, pgenericpartNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AGenericPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGenericPart pgenericpartNode1;
        {
            // Block
        TLb tlbNode2;
        PGenericTypes pgenerictypesNode3;
        TRb trbNode4;
        tlbNode2 = (TLb)nodeArrayList1.get(0);
        pgenerictypesNode3 = (PGenericTypes)nodeArrayList2.get(0);
        trbNode4 = (TRb)nodeArrayList3.get(0);

        pgenericpartNode1 = new AGenericPart(tlbNode2, pgenerictypesNode3, trbNode4);
        }
	nodeList.add(pgenericpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AAgenerictypes1GenericTypes */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGenericTypes pgenerictypesNode1;
        {
            // Block
        PType ptypeNode2;
        LinkedList listNode3 = new LinkedList();
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        {
            // Block
        }

        pgenerictypesNode1 = new AGenericTypes(ptypeNode2, listNode3);
        }
	nodeList.add(pgenerictypesNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AAgenerictypes2GenericTypes */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGenericTypes pgenerictypesNode1;
        {
            // Block
        PType ptypeNode2;
        LinkedList listNode4 = new LinkedList();
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pgenerictypesNode1 = new AGenericTypes(ptypeNode2, listNode4);
        }
	nodeList.add(pgenerictypesNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AAdditionalTypes */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAdditionalTypes padditionaltypesNode1;
        {
            // Block
        TComma tcommaNode2;
        PType ptypeNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        padditionaltypesNode1 = new AAdditionalTypes(tcommaNode2, ptypeNode3);
        }
	nodeList.add(padditionaltypesNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AAsuperdecls1SuperDecls */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSuperDecls psuperdeclsNode1;
        {
            // Block
        TKsuper tksuperNode2;
        PSuperType psupertypeNode3;
        LinkedList listNode4 = new LinkedList();
        tksuperNode2 = (TKsuper)nodeArrayList1.get(0);
        psupertypeNode3 = (PSuperType)nodeArrayList2.get(0);
        {
            // Block
        }

        psuperdeclsNode1 = new ASuperDecls(tksuperNode2, psupertypeNode3, listNode4);
        }
	nodeList.add(psuperdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AAsuperdecls2SuperDecls */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSuperDecls psuperdeclsNode1;
        {
            // Block
        TKsuper tksuperNode2;
        PSuperType psupertypeNode3;
        LinkedList listNode5 = new LinkedList();
        tksuperNode2 = (TKsuper)nodeArrayList1.get(0);
        psupertypeNode3 = (PSuperType)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        psuperdeclsNode1 = new ASuperDecls(tksuperNode2, psupertypeNode3, listNode5);
        }
	nodeList.add(psuperdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AAdditionalSupers */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAdditionalSupers padditionalsupersNode1;
        {
            // Block
        TComma tcommaNode2;
        PSuperType psupertypeNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        psupertypeNode3 = (PSuperType)nodeArrayList2.get(0);

        padditionalsupersNode1 = new AAdditionalSupers(tcommaNode2, psupertypeNode3);
        }
	nodeList.add(padditionalsupersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AAsupertype1SuperType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSuperType psupertypeNode1;
        {
            // Block
        TName tnameNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        tnameNode2 = (TName)nodeArrayList1.get(0);

        psupertypeNode1 = new ASuperType(tnameNode2, null);
        }
	nodeList.add(psupertypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AAsupertype2SuperType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSuperType psupertypeNode1;
        {
            // Block
        TName tnameNode2;
        PSuperGenericPart psupergenericpartNode3;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        psupergenericpartNode3 = (PSuperGenericPart)nodeArrayList2.get(0);

        psupertypeNode1 = new ASuperType(tnameNode2, psupergenericpartNode3);
        }
	nodeList.add(psupertypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce ASuperGenericPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSuperGenericPart psupergenericpartNode1;
        {
            // Block
        TLb tlbNode2;
        PSuperGenericTypes psupergenerictypesNode3;
        TRb trbNode4;
        tlbNode2 = (TLb)nodeArrayList1.get(0);
        psupergenerictypesNode3 = (PSuperGenericTypes)nodeArrayList2.get(0);
        trbNode4 = (TRb)nodeArrayList3.get(0);

        psupergenericpartNode1 = new ASuperGenericPart(tlbNode2, psupergenerictypesNode3, trbNode4);
        }
	nodeList.add(psupergenericpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AAsupergenerictypes1SuperGenericTypes */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSuperGenericTypes psupergenerictypesNode1;
        {
            // Block
        PSuperType psupertypeNode2;
        LinkedList listNode3 = new LinkedList();
        psupertypeNode2 = (PSuperType)nodeArrayList1.get(0);
        {
            // Block
        }

        psupergenerictypesNode1 = new ASuperGenericTypes(psupertypeNode2, listNode3);
        }
	nodeList.add(psupergenerictypesNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AAsupergenerictypes2SuperGenericTypes */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSuperGenericTypes psupergenerictypesNode1;
        {
            // Block
        PSuperType psupertypeNode2;
        LinkedList listNode4 = new LinkedList();
        psupertypeNode2 = (PSuperType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        psupergenerictypesNode1 = new ASuperGenericTypes(psupertypeNode2, listNode4);
        }
	nodeList.add(psupergenerictypesNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce ASuperAdditionalTypes */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSuperAdditionalTypes psuperadditionaltypesNode1;
        {
            // Block
        TComma tcommaNode2;
        PSuperType psupertypeNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        psupertypeNode3 = (PSuperType)nodeArrayList2.get(0);

        psuperadditionaltypesNode1 = new ASuperAdditionalTypes(tcommaNode2, psupertypeNode3);
        }
	nodeList.add(psuperadditionaltypesNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AIsaInstr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PExp pexpNode2;
        TKisa tkisaNode3;
        PType ptypeNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tkisaNode3 = (TKisa)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);

        pinstrNode1 = new AIsaInstr(pexpNode2, tkisaNode3, ptypeNode4);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ADeclInstr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        TKvar tkvarNode2;
        TId tidNode3;
        TEquals tequalsNode4;
        PExp pexpNode5;
        tkvarNode2 = (TKvar)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);

        pinstrNode1 = new ADeclInstr(tkvarNode2, tidNode3, tequalsNode4, pexpNode5);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AAssignInstr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        TId tidNode2;
        TEquals tequalsNode3;
        PExp pexpNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pinstrNode1 = new AAssignInstr(tidNode2, tequalsNode3, pexpNode4);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ANewInstr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        TKnew tknewNode2;
        PType ptypeNode3;
        tknewNode2 = (TKnew)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        pinstrNode1 = new ANewInstr(tknewNode2, ptypeNode3);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce ATypeInstr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        TKtype tktypeNode2;
        PExp pexpNode3;
        tktypeNode2 = (TKtype)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pinstrNode1 = new ATypeInstr(tktypeNode2, pexpNode3);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AClassnameInstr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        TKclassname tkclassnameNode2;
        PExp pexpNode3;
        tkclassnameNode2 = (TKclassname)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pinstrNode1 = new AClassnameInstr(tkclassnameNode2, pexpNode3);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AExecInstr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        TId tidNode2;
        TDot tdotNode3;
        TKexec tkexecNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tkexecNode4 = (TKexec)nodeArrayList3.get(0);

        pinstrNode1 = new AExecInstr(tidNode2, tdotNode3, tkexecNode4);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce ANewExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TKnew tknewNode2;
        PType ptypeNode3;
        tknewNode2 = (TKnew)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        pexpNode1 = new ANewExp(tknewNode2, ptypeNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AVarExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexpNode1 = new AVarExp(tidNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce ATerminal$ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PClassDecl pclassdeclNode1;
        pclassdeclNode1 = (PClassDecl)nodeArrayList1.get(0);
	if(pclassdeclNode1 != null)
	{
	  listNode2.add(pclassdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce ANonTerminal$ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PClassDecl pclassdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pclassdeclNode2 = (PClassDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pclassdeclNode2 != null)
	{
	  listNode3.add(pclassdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce ATerminal$Instr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PInstr pinstrNode1;
        pinstrNode1 = (PInstr)nodeArrayList1.get(0);
	if(pinstrNode1 != null)
	{
	  listNode2.add(pinstrNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce ANonTerminal$Instr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PInstr pinstrNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pinstrNode2 = (PInstr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pinstrNode2 != null)
	{
	  listNode3.add(pinstrNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce ATerminal$FormalDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PFormalDecl pformaldeclNode1;
        pformaldeclNode1 = (PFormalDecl)nodeArrayList1.get(0);
	if(pformaldeclNode1 != null)
	{
	  listNode2.add(pformaldeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce ANonTerminal$FormalDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PFormalDecl pformaldeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pformaldeclNode2 = (PFormalDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pformaldeclNode2 != null)
	{
	  listNode3.add(pformaldeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce ATerminal$AdditionalFormalTypes */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PAdditionalFormalTypes padditionalformaltypesNode1;
        padditionalformaltypesNode1 = (PAdditionalFormalTypes)nodeArrayList1.get(0);
	if(padditionalformaltypesNode1 != null)
	{
	  listNode2.add(padditionalformaltypesNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce ANonTerminal$AdditionalFormalTypes */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PAdditionalFormalTypes padditionalformaltypesNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionalformaltypesNode2 = (PAdditionalFormalTypes)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalformaltypesNode2 != null)
	{
	  listNode3.add(padditionalformaltypesNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce ATerminal$AdditionalTypes */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PAdditionalTypes padditionaltypesNode1;
        padditionaltypesNode1 = (PAdditionalTypes)nodeArrayList1.get(0);
	if(padditionaltypesNode1 != null)
	{
	  listNode2.add(padditionaltypesNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce ANonTerminal$AdditionalTypes */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PAdditionalTypes padditionaltypesNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionaltypesNode2 = (PAdditionalTypes)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionaltypesNode2 != null)
	{
	  listNode3.add(padditionaltypesNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce ATerminal$AdditionalSupers */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PAdditionalSupers padditionalsupersNode1;
        padditionalsupersNode1 = (PAdditionalSupers)nodeArrayList1.get(0);
	if(padditionalsupersNode1 != null)
	{
	  listNode2.add(padditionalsupersNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce ANonTerminal$AdditionalSupers */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PAdditionalSupers padditionalsupersNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionalsupersNode2 = (PAdditionalSupers)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalsupersNode2 != null)
	{
	  listNode3.add(padditionalsupersNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce ATerminal$SuperAdditionalTypes */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PSuperAdditionalTypes psuperadditionaltypesNode1;
        psuperadditionaltypesNode1 = (PSuperAdditionalTypes)nodeArrayList1.get(0);
	if(psuperadditionaltypesNode1 != null)
	{
	  listNode2.add(psuperadditionaltypesNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce ANonTerminal$SuperAdditionalTypes */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PSuperAdditionalTypes psuperadditionaltypesNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        psuperadditionaltypesNode2 = (PSuperAdditionalTypes)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(psuperadditionaltypesNode2 != null)
	{
	  listNode3.add(psuperadditionaltypesNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {7, SHIFT, 1}, {8, SHIFT, 2}, {9, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {15, SHIFT, 6}, },
			{{-1, ERROR, 1}, {14, SHIFT, 13}, },
			{{-1, ERROR, 2}, {11, SHIFT, 14}, {15, SHIFT, 15}, },
			{{-1, ERROR, 3}, {11, SHIFT, 14}, {15, SHIFT, 15}, },
			{{-1, ERROR, 4}, {14, SHIFT, 18}, },
			{{-1, ERROR, 5}, {15, SHIFT, 20}, },
			{{-1, REDUCE, 39}, {0, SHIFT, 21}, {2, SHIFT, 22}, },
			{{-1, ERROR, 7}, {16, ACCEPT, -1}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 10}, {6, SHIFT, 23}, },
			{{-1, REDUCE, 1}, {7, SHIFT, 1}, {8, SHIFT, 2}, {9, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {15, SHIFT, 6}, },
			{{-1, REDUCE, 2}, {8, SHIFT, 2}, {9, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {15, SHIFT, 6}, },
			{{-1, ERROR, 13}, {3, SHIFT, 27}, {5, SHIFT, 28}, {8, SHIFT, 2}, {9, SHIFT, 3}, {10, SHIFT, 29}, {11, SHIFT, 4}, {12, SHIFT, 5}, {15, SHIFT, 6}, },
			{{-1, ERROR, 14}, {14, SHIFT, 18}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 16}, {3, SHIFT, 34}, },
			{{-1, REDUCE, 34}, {6, REDUCE, 38}, },
			{{-1, ERROR, 20}, {2, SHIFT, 36}, },
			{{-1, ERROR, 21}, {13, SHIFT, 37}, },
			{{-1, ERROR, 22}, {11, SHIFT, 14}, {15, SHIFT, 15}, },
			{{-1, ERROR, 23}, {14, SHIFT, 18}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 3}, {8, SHIFT, 2}, {9, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {15, SHIFT, 6}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 27}, {14, SHIFT, 40}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 29}, {14, SHIFT, 43}, },
			{{-1, ERROR, 30}, {5, SHIFT, 45}, {8, SHIFT, 2}, {9, SHIFT, 3}, {10, SHIFT, 29}, {11, SHIFT, 4}, {12, SHIFT, 5}, {15, SHIFT, 6}, },
			{{-1, ERROR, 31}, {5, SHIFT, 48}, {8, SHIFT, 2}, {9, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {15, SHIFT, 6}, },
			{{-1, ERROR, 32}, {5, SHIFT, 50}, {8, SHIFT, 2}, {9, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {15, SHIFT, 6}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 34}, {14, SHIFT, 18}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 36}, {11, SHIFT, 14}, {15, SHIFT, 15}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 13}, {1, SHIFT, 54}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 42}, {4, SHIFT, 57}, {14, SHIFT, 40}, },
			{{-1, REDUCE, 25}, {3, SHIFT, 59}, },
			{{-1, REDUCE, 22}, {1, SHIFT, 61}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 46}, {5, SHIFT, 64}, {8, SHIFT, 2}, {9, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {15, SHIFT, 6}, },
			{{-1, ERROR, 47}, {5, SHIFT, 66}, {8, SHIFT, 2}, {9, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {15, SHIFT, 6}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 49}, {5, SHIFT, 67}, {8, SHIFT, 2}, {9, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {15, SHIFT, 6}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 19}, {1, SHIFT, 68}, },
			{{-1, ERROR, 52}, {4, SHIFT, 71}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 54}, {14, SHIFT, 72}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 14}, {1, SHIFT, 54}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 59}, {14, SHIFT, 43}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 61}, {14, SHIFT, 43}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 23}, {1, SHIFT, 61}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 65}, {5, SHIFT, 78}, {8, SHIFT, 2}, {9, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {15, SHIFT, 6}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 68}, {14, SHIFT, 18}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 20}, {1, SHIFT, 68}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 28}, {1, SHIFT, 81}, },
			{{-1, ERROR, 75}, {4, SHIFT, 84}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 81}, {14, SHIFT, 43}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 29}, {1, SHIFT, 81}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 53}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 7}, },
			{{-1, 8}, {11, 24}, },
			{{-1, 30}, },
			{{-1, 41}, {42, 58}, },
			{{-1, 55}, {56, 73}, },
			{{-1, 19}, {14, 33}, {23, 39}, {34, 51}, {68, 79}, },
			{{-1, 35}, },
			{{-1, 52}, },
			{{-1, 69}, {70, 80}, },
			{{-1, 31}, {30, 46}, },
			{{-1, 62}, {63, 77}, },
			{{-1, 44}, {59, 74}, {61, 76}, {81, 85}, },
			{{-1, 60}, },
			{{-1, 75}, },
			{{-1, 82}, {83, 86}, },
			{{-1, 9}, {12, 26}, {25, 26}, {32, 26}, {47, 26}, {49, 26}, {65, 26}, },
			{{-1, 10}, {2, 16}, {3, 17}, {22, 38}, {36, 53}, },
			{{-1, 11}, },
			{{-1, 12}, {11, 25}, {13, 32}, {30, 47}, {31, 49}, {46, 65}, },
			{{-1, 42}, },
			{{-1, 56}, },
			{{-1, 70}, },
			{{-1, 63}, },
			{{-1, 83}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class', 'type', 'classname', 'new', 'var', id, EOF",
			"expecting: name",
			"expecting: 'new', id",
			"expecting: id",
			"expecting: '.', '=', 'isa'",
			"expecting: EOF",
			"expecting: 'end', 'type', 'classname', 'new', 'var', id, EOF",
			"expecting: 'isa'",
			"expecting: 'type', 'classname', 'new', 'var', id, EOF",
			"expecting: '[', 'end', 'type', 'classname', 'super', 'new', 'var', id",
			"expecting: ',', '[', ']', 'end', 'isa', 'type', 'classname', 'new', 'var', id, EOF",
			"expecting: 'end', 'isa', 'type', 'classname', 'new', 'var', id, EOF",
			"expecting: '='",
			"expecting: 'exec()'",
			"expecting: 'end', 'type', 'classname', 'super', 'new', 'var', id",
			"expecting: 'end', 'type', 'classname', 'new', 'var', id",
			"expecting: ',', ']', 'end', 'isa', 'type', 'classname', 'new', 'var', id, EOF",
			"expecting: ',', ']', name",
			"expecting: ']', name",
			"expecting: ',', '[', ']', 'end', 'type', 'classname', 'new', 'var', id",
			"expecting: ',', 'end', 'type', 'classname', 'new', 'var', id",
			"expecting: ',', ']'",
			"expecting: ']'",
			"expecting: ',', ']', 'end', 'type', 'classname', 'new', 'var', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 1, 3, 4, 5, 0, 6, 7, 0, 8, 9, 1, 6, 6, 6, 10, 11, 12, 13, 2, 1, 0, 8, 6, 1, 0, 1, 14, 15, 15, 6, 1, 16, 2, 6, 6, 6, 17, 18, 18, 19, 20, 0, 15, 15, 0, 15, 0, 21, 22, 6, 1, 17, 17, 14, 18, 1, 23, 1, 20, 20, 0, 15, 0, 0, 1, 21, 21, 16, 17, 17, 21, 22, 20, 20, 0, 21, 21, 1, 21, 21, 23, 21, 21, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
