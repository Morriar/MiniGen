/* This file was generated by SableCC (http://www.sablecc.org/). */

package minigen.syntax3.node;

import java.util.*;
import minigen.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class ASuperDecls extends PSuperDecls
{
    private TKsuper _ksuper_;
    private PSuperType _superType_;
    private final LinkedList<PAdditionalSupers> _additionalSupers_ = new LinkedList<PAdditionalSupers>();

    public ASuperDecls()
    {
        // Constructor
    }

    public ASuperDecls(
        @SuppressWarnings("hiding") TKsuper _ksuper_,
        @SuppressWarnings("hiding") PSuperType _superType_,
        @SuppressWarnings("hiding") List<PAdditionalSupers> _additionalSupers_)
    {
        // Constructor
        setKsuper(_ksuper_);

        setSuperType(_superType_);

        setAdditionalSupers(_additionalSupers_);

    }

    @Override
    public Object clone()
    {
        return new ASuperDecls(
            cloneNode(this._ksuper_),
            cloneNode(this._superType_),
            cloneList(this._additionalSupers_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASuperDecls(this);
    }

    public TKsuper getKsuper()
    {
        return this._ksuper_;
    }

    public void setKsuper(TKsuper node)
    {
        if(this._ksuper_ != null)
        {
            this._ksuper_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ksuper_ = node;
    }

    public PSuperType getSuperType()
    {
        return this._superType_;
    }

    public void setSuperType(PSuperType node)
    {
        if(this._superType_ != null)
        {
            this._superType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._superType_ = node;
    }

    public LinkedList<PAdditionalSupers> getAdditionalSupers()
    {
        return this._additionalSupers_;
    }

    public void setAdditionalSupers(List<PAdditionalSupers> list)
    {
        this._additionalSupers_.clear();
        this._additionalSupers_.addAll(list);
        for(PAdditionalSupers e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ksuper_)
            + toString(this._superType_)
            + toString(this._additionalSupers_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ksuper_ == child)
        {
            this._ksuper_ = null;
            return;
        }

        if(this._superType_ == child)
        {
            this._superType_ = null;
            return;
        }

        if(this._additionalSupers_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ksuper_ == oldChild)
        {
            setKsuper((TKsuper) newChild);
            return;
        }

        if(this._superType_ == oldChild)
        {
            setSuperType((PSuperType) newChild);
            return;
        }

        for(ListIterator<PAdditionalSupers> i = this._additionalSupers_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAdditionalSupers) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
