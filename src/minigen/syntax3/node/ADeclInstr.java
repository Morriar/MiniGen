/* This file was generated by SableCC (http://www.sablecc.org/). */

package minigen.syntax3.node;

import minigen.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class ADeclInstr extends PInstr
{
    private TKvar _kvar_;
    private TId _id_;
    private TEquals _equals_;
    private PExp _exp_;

    public ADeclInstr()
    {
        // Constructor
    }

    public ADeclInstr(
        @SuppressWarnings("hiding") TKvar _kvar_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TEquals _equals_,
        @SuppressWarnings("hiding") PExp _exp_)
    {
        // Constructor
        setKvar(_kvar_);

        setId(_id_);

        setEquals(_equals_);

        setExp(_exp_);

    }

    @Override
    public Object clone()
    {
        return new ADeclInstr(
            cloneNode(this._kvar_),
            cloneNode(this._id_),
            cloneNode(this._equals_),
            cloneNode(this._exp_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADeclInstr(this);
    }

    public TKvar getKvar()
    {
        return this._kvar_;
    }

    public void setKvar(TKvar node)
    {
        if(this._kvar_ != null)
        {
            this._kvar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kvar_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TEquals getEquals()
    {
        return this._equals_;
    }

    public void setEquals(TEquals node)
    {
        if(this._equals_ != null)
        {
            this._equals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equals_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kvar_)
            + toString(this._id_)
            + toString(this._equals_)
            + toString(this._exp_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kvar_ == child)
        {
            this._kvar_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._equals_ == child)
        {
            this._equals_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kvar_ == oldChild)
        {
            setKvar((TKvar) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._equals_ == oldChild)
        {
            setEquals((TEquals) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
