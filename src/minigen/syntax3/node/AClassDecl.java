/* This file was generated by SableCC (http://www.sablecc.org/). */

package minigen.syntax3.node;

import minigen.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class AClassDecl extends PClassDecl
{
    private TKclass _kclass_;
    private TName _name_;
    private PFormalDecls _formalDecls_;
    private PSuperDecls _superDecls_;
    private TKend _kend_;

    public AClassDecl()
    {
        // Constructor
    }

    public AClassDecl(
        @SuppressWarnings("hiding") TKclass _kclass_,
        @SuppressWarnings("hiding") TName _name_,
        @SuppressWarnings("hiding") PFormalDecls _formalDecls_,
        @SuppressWarnings("hiding") PSuperDecls _superDecls_,
        @SuppressWarnings("hiding") TKend _kend_)
    {
        // Constructor
        setKclass(_kclass_);

        setName(_name_);

        setFormalDecls(_formalDecls_);

        setSuperDecls(_superDecls_);

        setKend(_kend_);

    }

    @Override
    public Object clone()
    {
        return new AClassDecl(
            cloneNode(this._kclass_),
            cloneNode(this._name_),
            cloneNode(this._formalDecls_),
            cloneNode(this._superDecls_),
            cloneNode(this._kend_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassDecl(this);
    }

    public TKclass getKclass()
    {
        return this._kclass_;
    }

    public void setKclass(TKclass node)
    {
        if(this._kclass_ != null)
        {
            this._kclass_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kclass_ = node;
    }

    public TName getName()
    {
        return this._name_;
    }

    public void setName(TName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public PFormalDecls getFormalDecls()
    {
        return this._formalDecls_;
    }

    public void setFormalDecls(PFormalDecls node)
    {
        if(this._formalDecls_ != null)
        {
            this._formalDecls_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._formalDecls_ = node;
    }

    public PSuperDecls getSuperDecls()
    {
        return this._superDecls_;
    }

    public void setSuperDecls(PSuperDecls node)
    {
        if(this._superDecls_ != null)
        {
            this._superDecls_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._superDecls_ = node;
    }

    public TKend getKend()
    {
        return this._kend_;
    }

    public void setKend(TKend node)
    {
        if(this._kend_ != null)
        {
            this._kend_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kend_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kclass_)
            + toString(this._name_)
            + toString(this._formalDecls_)
            + toString(this._superDecls_)
            + toString(this._kend_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kclass_ == child)
        {
            this._kclass_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._formalDecls_ == child)
        {
            this._formalDecls_ = null;
            return;
        }

        if(this._superDecls_ == child)
        {
            this._superDecls_ = null;
            return;
        }

        if(this._kend_ == child)
        {
            this._kend_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kclass_ == oldChild)
        {
            setKclass((TKclass) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((TName) newChild);
            return;
        }

        if(this._formalDecls_ == oldChild)
        {
            setFormalDecls((PFormalDecls) newChild);
            return;
        }

        if(this._superDecls_ == oldChild)
        {
            setSuperDecls((PSuperDecls) newChild);
            return;
        }

        if(this._kend_ == oldChild)
        {
            setKend((TKend) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
