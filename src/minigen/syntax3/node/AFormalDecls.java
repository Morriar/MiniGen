/* This file was generated by SableCC (http://www.sablecc.org/). */

package minigen.syntax3.node;

import java.util.*;
import minigen.syntax3.analysis.*;

@SuppressWarnings("nls")
public final class AFormalDecls extends PFormalDecls
{
    private TLb _lb_;
    private final LinkedList<PFormalDecl> _formalDecl_ = new LinkedList<PFormalDecl>();
    private TRb _rb_;

    public AFormalDecls()
    {
        // Constructor
    }

    public AFormalDecls(
        @SuppressWarnings("hiding") TLb _lb_,
        @SuppressWarnings("hiding") List<PFormalDecl> _formalDecl_,
        @SuppressWarnings("hiding") TRb _rb_)
    {
        // Constructor
        setLb(_lb_);

        setFormalDecl(_formalDecl_);

        setRb(_rb_);

    }

    @Override
    public Object clone()
    {
        return new AFormalDecls(
            cloneNode(this._lb_),
            cloneList(this._formalDecl_),
            cloneNode(this._rb_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFormalDecls(this);
    }

    public TLb getLb()
    {
        return this._lb_;
    }

    public void setLb(TLb node)
    {
        if(this._lb_ != null)
        {
            this._lb_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lb_ = node;
    }

    public LinkedList<PFormalDecl> getFormalDecl()
    {
        return this._formalDecl_;
    }

    public void setFormalDecl(List<PFormalDecl> list)
    {
        this._formalDecl_.clear();
        this._formalDecl_.addAll(list);
        for(PFormalDecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TRb getRb()
    {
        return this._rb_;
    }

    public void setRb(TRb node)
    {
        if(this._rb_ != null)
        {
            this._rb_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rb_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lb_)
            + toString(this._formalDecl_)
            + toString(this._rb_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lb_ == child)
        {
            this._lb_ = null;
            return;
        }

        if(this._formalDecl_.remove(child))
        {
            return;
        }

        if(this._rb_ == child)
        {
            this._rb_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lb_ == oldChild)
        {
            setLb((TLb) newChild);
            return;
        }

        for(ListIterator<PFormalDecl> i = this._formalDecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PFormalDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rb_ == oldChild)
        {
            setRb((TRb) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
